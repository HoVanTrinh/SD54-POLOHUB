//
//package com.example.demo.controllers.api;
//
//import com.example.demo.services.ChatGptService;
//import com.example.demo.services.IntentService;
//import com.theokanning.openai.completion.chat.ChatMessage;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RestController;
//
//import java.util.List;
//import java.util.Map;
//
//@RestController
//@RequestMapping("/chatgpt")
//public class ChatGptController {
//    private final ChatGptService chatGptService;
//    @Autowired
//    private final IntentService intentService;
//    // C√≥ th·ªÉ gi·ªØ history trong session ho·∫∑c g·ª≠i k√®m t·ª´ client
//
//    public ChatGptController(ChatGptService chatGptService, IntentService intentService) {
//        this.chatGptService = chatGptService;
//        this.intentService = intentService;
//    }
//
//    @PostMapping("/message")
//    public ResponseEntity<?> receive(@RequestBody Map<String, Object> payload) {
//        try {
//            List<Map<String,String>> messages = (List<Map<String,String>>) payload.get("messages");
//
//            List<ChatMessage> chatMessages = messages.stream()
//                    .map(map -> {
//                        String role = map.get("role");
//                        String content = map.get("content");
//                        return new ChatMessage(role, content);
//                    })
//                    .toList();
//
//            // L·∫•y message cu·ªëi ƒë·ªÉ detect intent
//            String lastUserMessage = chatMessages.get(chatMessages.size() - 1).getContent();
//
//            String intent = intentService.detectIntent(lastUserMessage);
//
//            // N·∫øu intent null ho·∫∑c kh√¥ng match v·ªõi c√°c intent c√≥ s·∫µn => fallback GPT
//            if (intent == null || intent.isEmpty()) {
//                String reply = chatGptService.chat(chatMessages);
//                return ResponseEntity.ok(Map.of("reply", reply));
//            }
//
//            // X·ª≠ l√Ω theo intent
//            switch (intent) {
//                case "CHECK_PRICE":
//                    return ResponseEntity.ok(Map.of("reply", "√Åo polo nam Polohub c√≥ gi√° t·ª´ 300,000 ƒë·∫øn 700,000 VNƒê t√πy m·∫´u m√£ v√† ch·∫•t li·ªáu."));
//                case "CHECK_SIZE":
//                    return ResponseEntity.ok(Map.of("reply", "Ch√∫ng t√¥i c√≥ c√°c size: S, M, L, XL. B·∫°n c·∫ßn m√¨nh h·ªó tr·ª£ ch·ªçn size kh√¥ng?"));
//                case "ORDER_STATUS":
//                    return ResponseEntity.ok(Map.of("reply", "B·∫°n vui l√≤ng cung c·∫•p m√£ ƒë∆°n h√†ng ƒë·ªÉ m√¨nh ki·ªÉm tra tr·∫°ng th√°i gi√∫p b·∫°n nh√©."));
//                case "PRODUCT_LINE":
//                    return ResponseEntity.ok(Map.of("reply", "Polohub c√≥ nhi·ªÅu m·∫´u √°o polo nam: classic, sporty, slim fit... B·∫°n th√≠ch m·∫´u n√†o?"));
//                case "PROMOTIONS":
//                    return ResponseEntity.ok(Map.of("reply", "Hi·ªán t·∫°i ch√∫ng t√¥i ƒëang c√≥ ch∆∞∆°ng tr√¨nh gi·∫£m gi√° 10% cho kh√°ch h√†ng m·ªõi."));
//                case "RETURN_POLICY":
//                    return ResponseEntity.ok(Map.of("reply", "B·∫°n c√≥ th·ªÉ ƒë·ªïi tr·∫£ s·∫£n ph·∫©m trong v√≤ng 7 ng√†y n·∫øu c√≤n nguy√™n tem v√† ch∆∞a qua s·ª≠ d·ª•ng."));
//                case "SUPPORT":
//                    return ResponseEntity.ok(Map.of("reply", "B·∫°n c·∫ßn h·ªó tr·ª£ g√¨? Vui l√≤ng li√™n h·ªá hotline: 0123 456 789 ho·∫∑c email support@polohub.vn"));
//                case "WORKING_HOURS":
//                    return ResponseEntity.ok(Map.of("reply", "C·ª≠a h√†ng m·ªü c·ª≠a t·ª´ 8h30 ƒë·∫øn 20h00 t·∫•t c·∫£ c√°c ng√†y trong tu·∫ßn."));
//                case "SHIPPING_INFO":
//                    return ResponseEntity.ok(Map.of("reply", "Ch√∫ng t√¥i giao h√†ng to√†n qu·ªëc, ph√≠ v·∫≠n chuy·ªÉn t·ª´ 30,000 VNƒê cho ƒë∆°n h√†ng d∆∞·ªõi 500,000 VNƒê."));
//                case "STORE_LOCATION":
//                    return ResponseEntity.ok(Map.of("reply", "C·ª≠a h√†ng Polohub hi·ªán t·∫°i c√≥ 3 chi nh√°nh t·∫°i H√† N·ªôi, ƒê√† N·∫µng v√† TP. H·ªì Ch√≠ Minh."));
//                case "GREETING":
//                    return ResponseEntity.ok(Map.of("reply", "Ch√†o b·∫°n! üëã M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"));
//                case "THANKS":
//                    return ResponseEntity.ok(Map.of("reply", "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n üòä N·∫øu c·∫ßn g√¨ th√™m c·ª© nh·∫Øn nh√©!"));
//                case "GOODBYE":
//                    return ResponseEntity.ok(Map.of("reply", "T·∫°m bi·ªát b·∫°n üëã H·∫πn g·∫∑p l·∫°i l·∫ßn sau nh√©!"));
//                case "PRODUCT_MATERIAL":
//                    return ResponseEntity.ok(Map.of("reply", "√Åo Polo Polohub ƒë∆∞·ª£c l√†m t·ª´ ch·∫•t li·ªáu v·∫£i cotton m·ªÅm m·∫°i, tho√°ng m√°t v√† b·ªÅn b·ªâ."));
//                case "ORDER_GUIDE":
//                    return ResponseEntity.ok(Map.of("reply", "ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n ch·ªâ c·∫ßn ch·ªçn s·∫£n ph·∫©m y√™u th√≠ch v√† l√†m theo c√°c b∆∞·ªõc thanh to√°n tr√™n website."));
//                case "PAYMENT_METHOD":
//                    return ResponseEntity.ok(Map.of("reply", "Ch√∫ng t√¥i h·ªó tr·ª£ thanh to√°n qua th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n ng√¢n h√†ng v√† v√≠ ƒëi·ªán t·ª≠."));
//                case "CARE_INSTRUCTIONS":
//                    return ResponseEntity.ok(Map.of("reply", "ƒê·ªÉ b·∫£o qu·∫£n √°o, b·∫°n n√™n gi·∫∑t tay v√† ph∆°i ·ªü n∆°i tho√°ng m√°t, tr√°nh ph∆°i d∆∞·ªõi √°nh n·∫Øng tr·ª±c ti·∫øp."));
//                case "COLLABORATION":
//                    return ResponseEntity.ok(Map.of("reply", "Ch√∫ng t√¥i r·∫•t vui khi ƒë∆∞·ª£c h·ª£p t√°c v·ªõi c√°c ƒë·ªëi t√°c. Vui l√≤ng g·ª≠i email t·ªõi support@polohub.vn ƒë·ªÉ th·∫£o lu·∫≠n th√™m."));
//                case "REVIEW":
//                    return ResponseEntity.ok(Map.of("reply", "B·∫°n c√≥ th·ªÉ ƒë·ªÉ l·∫°i ƒë√°nh gi√° sau khi tr·∫£i nghi·ªám s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i nh√©!"));
//                case "MEMBER_BENEFIT":
//                    return ResponseEntity.ok(Map.of("reply", "Th√†nh vi√™n c·ªßa Polohub s·∫Ω nh·∫≠n ƒë∆∞·ª£c ∆∞u ƒë√£i ƒë·∫∑c bi·ªát, bao g·ªìm gi·∫£m gi√° v√† qu√† t·∫∑ng h√†ng th√°ng."));
//                case "GIFT_PROMO":
//                    return ResponseEntity.ok(Map.of("reply", "Ch√∫ng t√¥i ƒëang c√≥ ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† cho kh√°ch h√†ng mua h√†ng trong d·ªãp l·ªÖ n√†y. H√£y tham gia ngay nh√©!"));
//                case "QUALITY_GUARANTEE":
//                    return ResponseEntity.ok(Map.of("reply", "Ch√∫ng t√¥i cam k·∫øt s·∫£n ph·∫©m Polohub ƒë·∫°t ch·∫•t l∆∞·ª£ng cao v√† ƒë·∫£m b·∫£o s·ª± h√†i l√≤ng c·ªßa kh√°ch h√†ng."));
//                case "EXCHANGE_POLICY":
//                    return ResponseEntity.ok(Map.of("reply", "N·∫øu s·∫£n ph·∫©m kh√¥ng ƒë√∫ng size ho·∫∑c l·ªói, b·∫°n c√≥ th·ªÉ ƒë·ªïi h√†ng trong v√≤ng 7 ng√†y, mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn."));
//                case "HELP_ORDERING":
//                    return ResponseEntity.ok(Map.of("reply", "B·∫°n c·∫ßn gi√∫p ƒë·ª° trong vi·ªác ƒë·∫∑t h√†ng? ƒê·ªÉ m√¨nh h∆∞·ªõng d·∫´n nh√©."));
//                case "FAST_DELIVERY":
//                    return ResponseEntity.ok(Map.of("reply", "Ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• giao h√†ng nhanh trong v√≤ng 1-2 ng√†y l√†m vi·ªác v·ªõi chi ph√≠ h·ª£p l√Ω."));
//                case "VU":
//                    return ResponseEntity.ok(Map.of("reply", "V≈© ngu nh∆∞ con ch√≥"));
//                default:
//                    String reply = chatGptService.chat(chatMessages);
//                    return ResponseEntity.ok(Map.of("reply", "Xin l·ªói, t√¥i kh√¥ng th·ªÉ hi·ªÉu ƒë∆∞·ª£c c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng?"));
//                // G·ªçi ChatGPT service ch·ªâ khi c·∫ßn thi·∫øt
//            }
//
//        }
//        catch (Exception e) {
//            return ResponseEntity.status(500).body(Map.of("error", "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω", "details", e.getMessage()));
//        }
//    }
//    public void logIntentUsage(String intent) {
//        // L∆∞u intent v√†o c∆° s·ªü d·ªØ li·ªáu ho·∫∑c file log
//        System.out.println("Intent ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng: " + intent);
//    }
//}
